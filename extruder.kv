#: import ExtruderWidget extruder_widget
#: import DialGauge dial-gauge
#: import GraphView graph-view

<NumericInput>
    use_bubble: False
    use_handles: False
    font_size: '18sp'

<HotendSpinnerOptions@SpinnerOption>
    background_color: .4, .4, .4, 1
    on_release: app.main_window.ids.extruder.selected_temp('hotend', self.text.split()[0])

<BedSpinnerOptions@SpinnerOption>
    background_color: .4, .4, .4, 1
    on_release: app.main_window.ids.extruder.selected_temp('bed', self.text.split()[0])

<ExtruderWidget>:
    orientation: 'vertical'
    canvas.before:
        Color:
            rgba: 0.4, 0.4, 0.4, 1
        Rectangle:
            pos: self.pos
            size: self.size

    id: extruder
    hotend_dg: hotend_dg
    bed_dg: bed_dg
    hotend_switch: hotend_switch
    bed_switch: bed_switch
    on_curtool: root._on_curtool()

    BoxLayout:
        orientation: 'vertical'

        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: dp(30)

            Label:
                text: 'Length:'

            NumericInput:
                id: extrude_length
                multiline: False
                input_type: 'number'
                input_filter: 'float'
                text: app.config.get('Extruder', 'length')
                on_text_validate: root.update_length()

            Label:
                text: ' mm, Speed: '

            NumericInput:
                id: extrude_speed
                multiline: False
                input_type: 'number'
                input_filter: 'float'
                text: app.config.get('Extruder', 'speed')
                on_text_validate: root.update_speed()

            Label:
                text: ' mm/min'

        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: dp(50)
            padding: [4, 4, 4, 4]
            spacing: 20

            Button:
                size_hint_y: None
                height: dp(40)
                text: 'Extrude'
                disabled: not app.is_connected
                on_press: root.extrude()
            Button:
                size_hint_y: None
                height: dp(40)
                text: 'Reverse'
                disabled: not app.is_connected
                on_press: root.reverse()

    ScreenManager:
        id: temps_screen
        size_hint_y: None
        height: sp(120)
        #loop: True
        Screen:
            name: 'dial'
            BoxLayout:
                orientation: 'horizontal'

                BoxLayout:
                    orientation: 'vertical'
                    DialGauge:
                        pos_hint: {'center_x': 0.5}
                        id: hotend_dg
                        dial_diameter: 180

                        # gauge properties
                        scale_max: 260
                        scale_min: 20
                        value: self.scale_min

                        # example for half temperature gauge
                        semi_circle: True
                        scale_increment: 20
                        angle_start: 90
                        angle_stop: 270
                        tic_frequency: 1
                        tic_radius: self.dial_diameter/2.0
                        needle_length: self.dial_diameter/2 - self.tic_length -4 # ends just where tics start less a few pixels
                        needle_width: 5
                        hub_radius: 10
                        dial_color: 1,1,0,1
                        hub_color: 1,0,0
                        needle_color: 1,0,0

                        show_value: True
                        value_offset_pos: 0, self.dial_diameter/4 # offset from center of dial
                        value_color: [0,1,0,1]

                        # setup three annulars of different colors
                        annulars: [{'color': [0,1,0,1], 'start': 20.0, 'stop': 60.0}, {'color': [1, 165.0/255, 0, 1], 'start': 60.0, 'stop': 80.0}, {'color': [1, 0, 0, 1], 'start': 80.0, 'stop': 260.0}]
                        annular_thickness: 6

                        setpoint_value: float('nan')
                        setpoint_color: 0,0,0,1
                        setpoint_length: self.dial_diameter/2
                        setpoint_thickness: 1

                    Label:
                        text: 'Hotend'
                        size_hint_y: None
                        size: self.texture_size

                BoxLayout:
                    orientation: 'vertical'
                    DialGauge:
                        pos_hint: {'center_x': 0.5}
                        id: bed_dg
                        dial_diameter: 180

                        # gauge properties
                        scale_max: 120
                        scale_min: 20
                        value: self.scale_min

                        # example for half temperature gauge
                        scale_increment: 10
                        semi_circle: True
                        angle_start: 90
                        angle_stop: 270
                        tic_frequency: 1
                        tic_radius: self.dial_diameter/2.0
                        needle_length: self.dial_diameter/2 - self.tic_length -4 # ends just where tics start less a few pixels
                        needle_width: 5
                        hub_radius: 10
                        dial_color: 1,1,0,1
                        hub_color: 1,0,0
                        needle_color: 1,0,0

                        show_value: True
                        value_offset_pos: 0, self.dial_diameter/4 # offset from center of dial
                        value_color: [0,1,0,1]

                        # setup two annulars of different colors
                        annulars: [{'color': [0,1,0,1], 'start': 20.0, 'stop': 60.0},  {'color': [1, 0, 0, 1], 'start': 60.0, 'stop': 120.0}]
                        annular_thickness: 6

                        setpoint_value: float('nan')
                        setpoint_color: 0,0,0,1
                        setpoint_length: self.dial_diameter/2
                        setpoint_thickness: 1

                    Label:
                        text: 'Bed'
                        size_hint_y: None
                        size: self.texture_size
        Screen:
            name: 'graph'
            on_enter: graph_view.reset()
            GraphView:
                id: graph_view

    GridLayout:
        cols: 3
        padding: 5, 5
        spacing: 5

        Label:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Hotend:'
        Switch:
            id: hotend_switch
            disabled: not app.is_connected
            on_active: root.switch_active(self, 'hotend', self.active, set_hotend_temp.text.split()[0])
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: '+'
                size_hint_x: None
                width: dp(40)
                on_press: root.adjust_temp('hotend', '5')
            Spinner:
                id: set_hotend_temp
                text: 'select temp' if not root.last_hotend_temp else str(root.last_hotend_temp)
                values: app.config.get('Extruder', 'hotend_presets').split(',')
                option_cls: Factory.HotendSpinnerOptions
            Button:
                text: '-'
                size_hint_x: None
                width: dp(40)
                on_press: root.adjust_temp('hotend', '-5')
            Label:
                size_hint_x: None
                width: self.texture_size[0]
                text: '°C'

        Label:
            size_hint_x: None
            width: self.texture_size[0]
            text: 'Bed:'
        Switch:
            id: bed_switch
            disabled: not app.is_connected
            on_active: root.switch_active(self, 'bed', self.active, set_bed_temp.text.split()[0])

        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: '+'
                size_hint_x: None
                width: dp(40)
                on_press: root.adjust_temp('bed', '5')
            Spinner:
                id: set_bed_temp
                text: 'select temp' if not root.last_bed_temp else str(root.last_bed_temp)
                values: app.config.get('Extruder', 'bed_presets').split(',')
                option_cls: Factory.BedSpinnerOptions
            Button:
                text: '-'
                size_hint_x: None
                width: dp(40)
                on_press: root.adjust_temp('bed', '-5')

            Label:
                size_hint_x: None
                width: self.texture_size[0]
                text: '°C'

    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        ToggleButton:
            id: tool_t0
            group: 'tool_group'
            on_press: root.set_tool(0)
            size_hint_y: None
            size: dp(40), dp(40)
            text: 'T0'
            state: 'down'
            disabled: not app.is_connected
            allow_no_selection: False

        ToggleButton:
            id: tool_t1
            group: 'tool_group'
            on_press: root.set_tool(1)
            size_hint_y: None
            size: dp(40), dp(40)
            text: 'T1'
            disabled: not root.has_T1 or not app.is_connected
            allow_no_selection: False


    # uses up rest of space bit like a spring in other layouts
    #Widget:

    # Label:
    #     canvas.before:
    #         PushMatrix
    #         Rotate:
    #             angle: 90
    #             origin: self.center
    #     canvas.after:
    #         PopMatrix
    #     size_hint: None, None
    #     pos: 0, 0
    #     #size: 10, 20
    #     halign: 'left'
    #     valign: 'top'
    #     text_size: self.size
    #     text: 'Extruder'
